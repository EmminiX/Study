{
  "name": "Study-Linux",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "<linux_tutor_assistant> <identity> LinuxSage - Expert Linux Tutor and Learning Companion. Mission: Help users master Linux concepts, troubleshoot issues, and develop command-line expertise using platform content and comprehensive Linux knowledge. Expertise: System Administration, Command Line Operations, Networking, Security, Package Management, Shell Scripting, DevOps Tools, Performance Tuning. </identity>\n<core_directives> Learning Philosophy: Always prioritize accurate, safe, and educational content. Connect learning to practical, real-world applications. Encourage hands-on practice with guided safety measures. Adapt explanations to user's skill level and context.\n\nSearch Requirement: When uncertain about current information, recent updates, or specific technical details not in your knowledge base, perform web search first before responding. Always verify command syntax and current best practices through search when needed. Search for platform-specific content updates or new learning materials when relevant.\n\nSafety Protocols: Always warn about potentially destructive commands. Provide safe alternatives and testing environments when possible. Explain the impact of commands before execution. Never provide commands that could compromise system security without explicit warnings.\n</core_directives>\n<teaching_methodology> Content Integration: Check and reference platform content from https://linux.emmi.zone first. Connect responses to specific platform lessons and modules. Use platform examples and practical exercises. Link to relevant platform sections for deeper learning.\n\nResponse Structure: Provide clear, step-by-step explanations with working commands. Explain why commands work and their practical applications. Include relevant safety notes and best practices.\n\nAdaptation Guidelines: Assess user's skill level from their questions. Provide appropriate detail - more for beginners, concise for advanced users. Use analogies and examples that match user's background. Encourage questions and provide multiple learning paths.\n</teaching_methodology>\n<interaction_protocols> Engagement Rules: Always maintain connection to the learning platform curriculum. Provide working, tested commands with clear explanations. Use practical examples from real-world scenarios. Show command output examples when helpful. Encourage experimentation in safe environments.\n\nTroubleshooting Approach: Understand the problem and context. Search for current solutions if needed. Provide diagnostic commands first. Offer multiple solution approaches. Explain root causes and prevention. Connect to relevant platform troubleshooting lessons.\n\nLearning Path Guidance: Reference specific platform modules and lessons. Suggest logical progression through curriculum. Identify prerequisite knowledge gaps. Recommend practice exercises and labs. Connect current topic to broader Linux ecosystem.\n</interaction_protocols> </linux_tutor_assistant>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        240,
        -260
      ],
      "id": "a38cd5b8-2007-4139-98c5-7c14b7515d26",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "mistralai/mistral-small-3.1-24b-instruct:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        40,
        180
      ],
      "id": "0a777c3a-71ef-4f34-ade0-55224c101ae6",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "0uGRrOdkO7Yd95TG",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        400,
        180
      ],
      "id": "a0c6b741-1939-46ad-bd49-f7d5ab9f41a3",
      "name": "SerpAPI",
      "credentials": {
        "serpApi": {
          "id": "Q7UMwUziEJRsiaEw",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Accept, Authorization"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        680,
        120
      ],
      "id": "eddffa8b-0407-42d2-8a41-6f2f6e2f46f7",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        220,
        180
      ],
      "id": "3f2f2874-894c-4f8c-93ed-c197e62398ad",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "5f241c28-3e09-4a97-a00d-579fed1935ba",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -100,
        -80
      ],
      "id": "4ecd8696-83fb-46ae-96ff-eace5a8744ad",
      "name": "Webhook",
      "webhookId": "5f241c28-3e09-4a97-a00d-579fed1935ba"
    },
    {
      "parameters": {
        "jsCode": "// Extract and format the message for the AI Agent\ntry {\n  const inputData = $input.item.json;\n  console.log('Webhook received:', inputData);\n  \n  // Extract the message\n  let message = '';\n  if (inputData && inputData.message) {\n    message = String(inputData.message).trim();\n  } else {\n    message = 'Hello, I need help with Linux.';\n  }\n  \n  console.log('Processing message:', message);\n  \n  // Format for AI Agent - the agent expects 'chatInput'\n  const formattedData = {\n    chatInput: message\n  };\n  \n  console.log('Formatted data for AI Agent:', formattedData);\n  \n  return { json: formattedData };\n} catch (error) {\n  console.error('Error in Format Message node:', error);\n  \n  // Fallback data\n  return {\n    json: {\n      chatInput: 'Hello, I need help with Linux.'\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        60,
        -220
      ],
      "id": "71abb11b-36dd-4b30-9728-4f248442b5cc",
      "name": "Format Message"
    },
    {
      "parameters": {
        "jsCode": "// Ensure the response is properly formatted for the webhook response\ntry {\n  const aiOutput = $input.item.json;\n  console.log('AI Agent output received:', aiOutput);\n  \n  let responseText = '';\n  \n  // Try to extract the response from various possible formats\n  if (aiOutput.output) {\n    responseText = String(aiOutput.output);\n  } else if (aiOutput.response) {\n    responseText = String(aiOutput.response);\n  } else if (aiOutput.text) {\n    responseText = String(aiOutput.text);\n  } else if (typeof aiOutput === 'string') {\n    responseText = aiOutput;\n  } else {\n    // Fallback: convert the entire object to string\n    responseText = JSON.stringify(aiOutput);\n  }\n  \n  // Clean up the response text\n  responseText = responseText.trim();\n  \n  if (!responseText || responseText === '{}' || responseText === 'null') {\n    responseText = \"I'm here to help you with Linux! What would you like to learn about?\";\n  }\n  \n  // Create the final response object\n  const finalResponse = {\n    response: responseText,\n    timestamp: new Date().toISOString(),\n    status: 'success'\n  };\n  \n  console.log('Final response being sent:', finalResponse);\n  \n  return { json: finalResponse };\n} catch (error) {\n  console.error('Error in Format Response node:', error);\n  \n  // Emergency fallback response\n  return {\n    json: {\n      response: \"I'm LinuxSage, your Linux learning assistant. How can I help you today?\",\n      timestamp: new Date().toISOString(),\n      status: 'fallback'\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        620,
        -160
      ],
      "id": "f550c6ef-217d-475e-8561-004d4c0a805c",
      "name": "Format Response"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Message": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "900d2b8e-e10a-4429-91c0-5d7483a76ed3",
  "meta": {
    "instanceId": "dc3cc0328f4d05a9fe1402e5a39f26a0b54cc6acf7abc4ba920b99ba609327f7"
  },
  "id": "8DnB1u6B5HIbeBED",
  "tags": []
}